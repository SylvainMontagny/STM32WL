modifications to enable FUOTA

Update Agent	|	SBSFU	(Secure Boot Secure Firmware Update)
		|	SE	(Secure Engine)
		|	KMS	(Key Management Service)


### Gloable steps

> generate in 1_image_SECoreBin project		SE_Core.bin				

> generate in 1_image_BFU project		SE_interface_appli.o			
						Project.bin		

> generate in LoRaWAN_End_Node project		LoRaWAN_End_Node.bin			
						LoRaWAN_End_Node.sfb		-> to send via FUOTA
						BFU_LoRaWAN_End_Node.bin	-> flash the device with it, the first time

> get Linker_Common								-> link the 3 previous projects together


### Modifications to have all the projects in standalone mode (solution not implemented)

> LIB_Standalone folder creation 		in STM32WL_FUOTA folder
> change the path				in prebuild.sh (line 8)

Cancel modifications to turn the project into a all standalone project
--> too much issues



### New solution

> folder Middleware				copy-past (with only needed sub-folders) in standalone folder
> folder Driver					copy-past (with only needed sub-folders) in standalone folder
> folder Utilities				copy-past (with only needed sub-folders) in standalone folder
> folder with the 3 projects			added in STM32WL_FUOTA\Projects\NUCLEO-WL55JC\Applications\LoRaWAN_FUOTA

Then the bootloader firmware and the fuota sendable firmware are in folder:
STM32WL_FUOTA\Projects\NUCLEO-WL55JC\Applications\LoRaWAN_FUOTA\LoRaWAN_End_Node\STM32CubeIDE\Binary

V1 creation
> SendTxData()					modified to make it send 0x01 on port 1

V2 creation 
> set 1.1.2					in lora_app_version.h
> NVIC_SystemReset() function			commented in FwUpdateAgent_Run() function, in fw_update_agent.c, line 119
						// to avoid immediate reboot after the whole data block has been rebuilt
> new LOG					in FwUpdateAgent_Run() function, in fw_update_agent.c, line 120

V3 creation
> set 1.1.3					in lora_app_version.h

V4 creation - make the firmware management working better
> rebootTimeAns = ...				formula modification in LmhpFirmwareManagement.c, line 241
						-->		rebootTimeAns = rebootTimeReq - (curTime.Seconds - UNIX_GPS_EPOCH_OFFSET)
						instead of 	rebootTimeAns = rebootTimeReq - curTime.Seconds)
						// UNIX_GPS_EPOCH_OFFSET is number of seconds elapsed between Unix epoch and GPS epoch.
						
> SendTXStopFrag()				created in lora_app.c (line 520) 
						and used in FRAG_DECODER_IF_OnDone() in frag_decoder_if.c (line 248)
						(this function send a frame to the AS to say the end-device
						has already re-built the file with the fragments received)

> #include "lora_app.h"				added in frag_decode_if.c (line 31)

V4 creation
> set 1.1.4					in lora_app_version.h









