# $@ = The target name being genereted
# $< = The name of the first prerequisites
# $(var:pattern=replacement) = if 'patern' appears in 'var', it is substitute with 'replacement'
# Example : $(C_FILES:.c=.o) = when .c appears in CFILES, it's replaced by .o


TOOLCHAIN_PATH = /home/debian/stm32/gcc-arm-none-eabi-10.3-2021.10/bin/
TARGET = app
ASM_DIR = Startup/
INC_DIR = Inc/

# C sources files
C_FILES  = $(wildcard STM32WLxx_HAL_Driver/Src/*.c)
C_FILES += $(wildcard Drivers/BSP/STM32WLxx_Nucleo/*.c)
C_FILES += $(wildcard Middlewares/LoRaWAN/*.c) $(wildcard Middlewares/LoRaWAN/*/*.c)
C_FILES += $(wildcard Middlewares/SubGHz_Phy/*.c)
C_FILES += $(wildcard LoRaWAN/*/*.c)
C_FILES += $(wildcard Utilities/*.c)
C_FILES += $(wildcard Core/*.c)

# ASM sources files
ASM_FILES = $(wildcard $(ASM_DIR)*.s)

# Includes files
INCLUDES  = -I$(INC_DIR)
INCLUDES += -ILoRaWAN/Target
INCLUDES += -ILoRaWAN/App
INCLUDES += -ISTM32WLxx_HAL_Driver/Inc/
INCLUDES += -ISTM32WLxx_HAL_Driver/Inc/Legacy
INCLUDES += -IDrivers/BSP/STM32WLxx_Nucleo
INCLUDES += -IDrivers/CMSIS/Include
INCLUDES += -IDrivers/CMSIS/ST/STM32WLxx/Include/
INCLUDES += -IMiddlewares/LoRaWAN
INCLUDES += -IMiddlewares/LoRaWAN/Packages
INCLUDES += -IMiddlewares/LoRaWAN/Region
INCLUDES += -IMiddlewares/LoRaWAN/Utilities
INCLUDES += -IMiddlewares/SubGHz_Phy
INCLUDES += -IUtilities

# Compiler and Compiler Flags
CC = $(TOOLCHAIN_PATH)arm-none-eabi-gcc

CFLAGS  = -g3 -O0  -std=gnu11 
CFLAGS += -mcpu=cortex-m4 -mthumb -mfloat-abi=soft
CFLAGS += -DCORE_CM4 -DSTM32WL55xx -DUSE_HAL_DRIVER -DDEBUG
CFLAGS += $(INCLUDES)

# Object files
CXX_OBJS = $(C_FILES:.c=.o)
ASM_OBJS = $(ASM_FILES:.s=.o)
ALL_OBJS = $(ASM_OBJS) $(CXX_OBJS)

# Linker Script and Linker Flags
LD_SCRIPT = STM32WL55JCIX_FLASH.ld

LFLAGS = -T$(LD_SCRIPT) --specs=nosys.specs -Wl,--gc-sections -static --specs=nano.specs -Wl,--start-group -lc -lm -Wl,--end-group


.PHONY: clean

all: $(TARGET).elf $(TARGET).bin

$(CXX_OBJS): %.o: %.c
$(ASM_OBJS): %.o: %.s
$(ALL_OBJS): 
	@echo "[CC] $@"
	@$(CC) $(CFLAGS) -c $< -o $@

%.elf: $(ALL_OBJS)
	@echo ' '
	@echo "[ELF] $@"
	@$(CC) $(CFLAGS) $(LFLAGS) $(ALL_OBJS) -o $@

%.bin: $(ALL_OBJS)
	@echo ' '
	@echo "[BIN] $@"
	@$(TOOLCHAIN_PATH)arm-none-eabi-objcopy -O binary $(TARGET).elf $@
	@echo ' '

clean:
	@rm -f $(ALL_OBJS) $(TARGET).elf  $(TARGET).bin
